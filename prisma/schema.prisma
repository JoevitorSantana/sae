// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Form {
  id          Int      @id @default(autoincrement())
  userId      String
  createdAt   DateTime @default(now())
  published   Boolean  @default(false)
  name        String
  description String   @default("")
  content     String   @default("[]")

  visits      Int @default(0)
  submissions Int @default(0)

  shareURL        String            @unique @default(uuid())
  FormSubmissions FormSubmissions[]
  status      Int @default(1)

  @@unique([name, userId])
}

model FormSubmissions {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  formId    Int
  form      Form     @relation(fields: [formId], references: [id])
  userId    String

  content String
}

model User {
  id        Int  @id @default(autoincrement())
  id_clerk  String?
  name      String?
  lastName  String?
  email     String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  address   String?
  phone     String?
  courses     UserCourses[]  @relation("StudentCourses")
  teaching    UserCourses[]  @relation("TeacherCourses")
}

model Course {
  id        Int  @id @default(autoincrement())
  courseName    String
  courseAbbr    String
  userCourses   UserCourses[]
}

model UserCourses {
  id          Int @id @default(autoincrement())
  userId      Int
  courseId    Int
  teacherId   Int
  finishDate  DateTime?

  user        User    @relation("StudentCourses", fields: [userId], references: [id])
  course      Course  @relation(fields: [courseId], references: [id])
  teacher     User    @relation("TeacherCourses", fields: [teacherId], references: [id])

  @@unique([userId, courseId])
}